{"ast":null,"code":"import _classCallCheck from \"/Users/ryordan/Projects/mars-weather/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ryordan/Projects/mars-weather/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ryordan/Projects/mars-weather/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ryordan/Projects/mars-weather/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/ryordan/Projects/mars-weather/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/ryordan/Projects/mars-weather/src/AirTemperature.js\";\nimport React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nvar width = 650;\nvar height = 650;\n\nvar AirTemperature =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AirTemperature, _Component);\n\n  function AirTemperature() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AirTemperature);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AirTemperature)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      slices: [],\n      // array of svg path commands, each = one day\n      typeAnnotations: []\n    };\n    return _this;\n  }\n\n  _createClass(AirTemperature, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"svg\", {\n        width: width,\n        height: height,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, React.createElement(\"g\", {\n        transform: \"translate(\".concat(width / 2, \", \").concat(height / 2, \")\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, this.state.slices.map(function (d, i) {\n        return React.createElement(\"path\", {\n          key: i,\n          d: d.path,\n          fill: d.fill,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64\n          },\n          __self: this\n        });\n      }), this.state.typeAnnotations.map(function (d, i) {\n        return React.createElement(\"g\", {\n          key: i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68\n          },\n          __self: this\n        }, React.createElement(\"circle\", {\n          r: d.r,\n          fill: \"none\",\n          stroke: \"#999\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69\n          },\n          __self: this\n        }), React.createElement(\"text\", {\n          y: -d.r - 2,\n          textAnchor: \"middle\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70\n          },\n          __self: this\n        }, d.type, \"\\u2109\"));\n      })));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var data = nextProps.data,\n          range = nextProps.range;\n      if (!data) return {};\n      var radiusScale = d3.scaleLinear().domain([d3.min(data, function (d) {\n        return d.min;\n      }), d3.max(data, function (d) {\n        return d.max;\n      })]).range([0, width / 2]);\n      var colorScale = d3.scaleSequential().domain(d3.extent(data, function (d) {\n        return d.avg;\n      })).interpolator(d3.interpolateRdYlBu); // get the angle for each slice\n      // 2PI / 365\n\n      var perSliceAngle = 2 * Math.PI / data.length;\n      var arcGenerator = d3.arc();\n      var slices = data.map(function (d, i) {\n        var path = arcGenerator({\n          startAngle: i * perSliceAngle,\n          endAngle: (i + 1) * perSliceAngle,\n          innerRadius: radiusScale(d.min),\n          outerRadius: radiusScale(d.max)\n        }); // slice should be colored if there's no sol range\n        // or if the slice is within the sol range\n\n        var isColored = !range.length || range[0] <= d.sol && d.sol <= range[1];\n        return {\n          path: path,\n          fill: isColored ? colorScale(d.avg) : \"#ccc\"\n        };\n      });\n      var typeAnnotations = [50, 100, 125, 150, 200].map(function (type) {\n        return {\n          r: radiusScale(type),\n          type: type\n        };\n      });\n      return {\n        slices: slices,\n        typeAnnotations: typeAnnotations\n      };\n    }\n  }]);\n\n  return AirTemperature;\n}(Component);\n\nexport default AirTemperature;","map":{"version":3,"sources":["/Users/ryordan/Projects/mars-weather/src/AirTemperature.js"],"names":["React","Component","d3","width","height","AirTemperature","state","slices","typeAnnotations","map","d","i","path","fill","r","type","nextProps","prevState","data","range","radiusScale","scaleLinear","domain","min","max","colorScale","scaleSequential","extent","avg","interpolator","interpolateRdYlBu","perSliceAngle","Math","PI","length","arcGenerator","arc","startAngle","endAngle","innerRadius","outerRadius","isColored","sol"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\n\nconst width = 650;\nconst height = 650;\n\nclass AirTemperature extends Component {\n  state = {\n    slices: [], // array of svg path commands, each = one day\n    typeAnnotations: []\n  };\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const { data, range } = nextProps;\n    if (!data) return {};\n\n    const radiusScale = d3\n      .scaleLinear()\n      .domain([d3.min(data, d => d.min), d3.max(data, d => d.max)])\n      .range([0, width / 2]);\n\n    const colorScale = d3\n      .scaleSequential()\n      .domain(d3.extent(data, d => d.avg))\n      .interpolator(d3.interpolateRdYlBu);\n\n    // get the angle for each slice\n    // 2PI / 365\n    const perSliceAngle = (2 * Math.PI) / data.length;\n\n    const arcGenerator = d3.arc();\n    const slices = data.map((d, i) => {\n      const path = arcGenerator({\n        startAngle: i * perSliceAngle,\n        endAngle: (i + 1) * perSliceAngle,\n        innerRadius: radiusScale(d.min),\n        outerRadius: radiusScale(d.max)\n      });\n      // slice should be colored if there's no sol range\n      // or if the slice is within the sol range\n      const isColored =\n        !range.length || (range[0] <= d.sol && d.sol <= range[1]);\n      return {\n        path,\n        fill: isColored ? colorScale(d.avg) : \"#ccc\"\n      };\n    });\n\n    const typeAnnotations = [50, 100, 125, 150, 200].map(type => {\n      return {\n        r: radiusScale(type),\n        type\n      };\n    });\n\n    return { slices, typeAnnotations };\n  }\n\n  render() {\n    return (\n      <svg width={width} height={height}>\n        <g transform={`translate(${width / 2}, ${height / 2})`}>\n          {this.state.slices.map((d, i) => (\n            <path key={i} d={d.path} fill={d.fill} />\n          ))}\n\n          {this.state.typeAnnotations.map((d, i) => (\n            <g key={i}>\n              <circle r={d.r} fill=\"none\" stroke=\"#999\" />\n              <text y={-d.r - 2} textAnchor=\"middle\">\n                {d.type}℉\n              </text>\n            </g>\n          ))}\n        </g>\n      </svg>\n    );\n  }\n}\n\nexport default AirTemperature;\n"]},"metadata":{},"sourceType":"module"}